{"./":{"url":"./","title":"本书简介","keywords":"","body":"本书简介 "},"page/1010.html":{"url":"page/1010.html","title":"速查","keywords":"","body":""},"page/1011.html":{"url":"page/1011.html","title":"简介","keywords":"","body":"简介 JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。 JSP（全称Java Server Pages）是由 Sun Microsystems 公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。 JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。 JSP文件后缀名为 *.jsp 。 JSP开发的WEB应用可以跨平台使用，既可以运行在 Linux 上也能运行在 Windows 上。 第一个 JSP 程序 什么是Java Server Pages? JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以结束。 JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。 JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。 JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。 为什么使用JSP？ JSP程序与CGI程序有着相似的功能，但和CGI程序相比，JSP程序有如下优势： 性能更加优越，因为JSP可以直接在HTML网页中动态嵌入元素而不需要单独引用CGI文件。 服务器调用的是已经编译好的JSP文件，而不像CGI/Perl那样必须先载入解释器和目标脚本。 JSP 基于Java Servlet API，因此，JSP拥有各种强大的企业级Java API，包括JDBC，JNDI，EJB，JAXP等等。 JSP页面可以与处理业务逻辑的 Servlet 一起使用，这种模式被Java servlet 模板引擎所支持。 最后，JSP是Java EE不可或缺的一部分，是一个完整的企业级应用平台。这意味着JSP可以用最简单的方式来实现最复杂的应用。 JSP的优势 以下列出了使用JSP带来的其他好处： 与ASP相比：JSP有两大优势。首先，动态部分用Java编写，而不是VB或其他MS专用语言，所以更加强大与易用。第二点就是JSP易于移植到非MS平台上。 与纯 Servlet 相比：JSP可以很方便的编写或者修改HTML网页而不用去面对大量的println语句。 与SSI相比：SSI无法使用表单数据、无法进行数据库链接。 与JavaScript相比：虽然JavaScript可以在客户端动态生成HTML，但是很难与服务器交互，因此不能提供复杂的服务，比如访问数据库和图像处理等等。 与静态HTML相比：静态HTML不包含动态信息。 "},"page/1012.html":{"url":"page/1012.html","title":"发展","keywords":"","body":"发展 "},"page/1140.html":{"url":"page/1140.html","title":"原理","keywords":"","body":"原理 tomcat目录结构及其功能 bin：二进制执行文件。里面最常用的文件是startup.bat，如果是 Linux 或 Mac 系统启动文件为 startup.sh。 conf:配置目录。里面最核心的文件是server.xml。可以在里面改端口号等。默认端口号是8080，也就是说，此端口号不能被其他应用程序占用。 lib：库文件。tomcat运行时需要的jar包所在的目录 logs：日志 temp：临时产生的文件，即缓存 webapps：web的应用程序。web应用放置到此目录下浏览器可以直接访问 work：编译以后的class文件。 "},"page/1013.html":{"url":"page/1013.html","title":"配置","keywords":"","body":"配置 Linux 下载 http://tomcat.apache.org/ 配置tomcat 1.解压 解压之后的文件放在一个目录假设为/usr/local/apache-tomcat-9.0.34目录，注意文件夹apache-tomcat-9.0.34里面就是bin、conf、lib那些，注意路径里面不要有中文字符和空格。 2.给所有用户配置java环境 以root用户登录 sudo -i 修改配置文件系统级别变量 vim /etc/profile 按下insert键，然后移动到最后一行，添加 #configuration tomcat development enviroument CATALINA_HOME=/media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34 export PATH={% math_inline %}CATALINA_HOME/bin:{% endmath_inline %}PATH 然后按下esc键，输入:,输入wq退出 重新加载系统配置 source /etc/profile 退出之后输入 startup.sh 或者{% math_inline %}CATALINA_HOME/bin/startup.sh 如果能看到对应启动信息，则说明java环境变量配置成功 Using CATALINA_BASE: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34 Using CATALINA_HOME: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34 Using CATALINA_TMPDIR: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34/temp Using JRE_HOME: /media/zander/file/deepin/dev/java/jdk/jdk1.8.0_241 Using CLASSPATH: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34/bin/bootstrap.jar:/media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34/bin/tomcat-juli.jar Tomcat started.#出现这样类似的表示成功，若提示无此命令则配置错误 3.给当前用户配置java环境 同理修改用户配置 vim ~/.bash_profile （注意修改上面命令只对bash作为shell有效，如果是zsh,则为vim ~/.zshrc） 4.注意 1.启动后代开浏览器查看http:127.0.0.1:8080查看是否有tomcat默认页面， 如果8080端口被占用可能无法启动可使用sudo netstat -ntulp | grep 8080查看是否被占用，如果被占用，且必要可以修改tomcat的端口在安装目录/conf/server.xml的大概70行左右 改掉下面其他端口，可使用sudo netstat -ntulp | grep 其他端口查看将要替换的端口是否是空闲的 2.如果是linux桌面环境，系统变量配置，用户变量未配置，可能会出现直接进入目录点击startup.sh提示启动成功，或者用自动脚本进入启动提示成功，但是8080端口没有数据，查看当前用户使用的bash的是否添加环境变量 5.使用 将下面内容保存为helloworld.jsp,放在安装目录/webapps/ROOT 访问http://127.0.0.1:8080/helloworld.jsp即可看到内容。 配置Vscode 1.安装插件 https://marketplace.visualstudio.com/items?itemName=adashen.vscode-tomcat 2.停掉已有tomcat服务 自己的tomcat安装目录/bin/shutdown.sh或者{% endmath_inline %}CATALINA_HOME/bin/shutdown.sh，如果配置环境变量的话，直接shutdown.sh也可以 不然可能会报错正在摧毁协议处理器之类的。 3.新建项目 手动打开或者新建一个项目，新建一个test.jsp,里面填入下列内容 4.打包项目 在vscode里按ctrl+p组合键，输入>tomcat:generate并回车，生成.war文件 5.添加server 点击Tomcat servers添加符号，选择安装目录，点击打开 6.启动server 选择.war文件，右击启动 7. 打开网页访问测试 右击点开在浏览器打开 如果没有index.jsp的话会提示未找到 在后面输入我们创建的1.jsp即可访问 参考 https://www.runoob.com/jsp/jsp-setup.html https://www.jianshu.com/p/1355b54a5801 "},"page/1014.html":{"url":"page/1014.html","title":"基础","keywords":"","body":"基础 "},"page/1119.html":{"url":"page/1119.html","title":"标识符","keywords":"","body":"标识符 "},"page/1120.html":{"url":"page/1120.html","title":"关键字","keywords":"","body":"关键字 "},"page/1121.html":{"url":"page/1121.html","title":"预定义标识符","keywords":"","body":"预定义标识符 "},"page/1122.html":{"url":"page/1122.html","title":"用户自定义标识符","keywords":"","body":"用户自定义标识符 "},"page/1115.html":{"url":"page/1115.html","title":"行与缩进","keywords":"","body":"行与缩进 "},"page/1117.html":{"url":"page/1117.html","title":"大小写","keywords":"","body":"大小写 "},"page/1118.html":{"url":"page/1118.html","title":"注释","keywords":"","body":"注释 "},"page/1133.html":{"url":"page/1133.html","title":"编码","keywords":"","body":"编码 "},"page/1116.html":{"url":"page/1116.html","title":"语句结束","keywords":"","body":"语句结束 "},"page/1023.html":{"url":"page/1023.html","title":"风格","keywords":"","body":"风格 "}}