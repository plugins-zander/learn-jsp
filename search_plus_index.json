{"./":{"url":"./","title":"本书简介","keywords":"","body":"本书简介 "},"page/1011.html":{"url":"page/1011.html","title":"简介","keywords":"","body":"简介 什么是JSP JSP是Java Server Page的缩写，是由Sun公司倡导，许多公司参与，于1999年推出的一种Web服务设计标准。 "},"page/1012.html":{"url":"page/1012.html","title":"环境","keywords":"","body":"环境 "},"page/1014.html":{"url":"page/1014.html","title":"原理","keywords":"","body":"原理 环境简介 所谓B/S模式(Browser/Server浏览器/服务器模式)，是指需要获取信息的用户使用浏览器向服务器发出请求，服务器对此做出响应，将有关信息发送给用户的浏览器。 在B/S模式中，服务器上必须有所谓的Web应用程序，服务器通过运行这些Web应用程序来响应用户的请求。因此，基于B/S模式的网络程序的核心就是设计服务器端的Web应用程序。 一个服务器上可以有很多基于JSP的Web应用程序，以满足各种用户的需求。这些Web应用程序必须有一个软件来统一管理和运行，这样的软件被称作JSP引擎或JSP容器，而安装JSP引擎的计算机被称作一个支持JSP的Web服务器。 Tomcat是一个免费的开源JSP引擎，将安装了Tomcat的计算机称作一个Tomcat服务器。 JSP运行原理 当服务器上的一个JSP页面被第一次请求执行时，服务器上的JSP引擎首先将JSP页面文件转译成一个java文件，并编译这个java文件生成字节码文件，然后执行字节码文件响应客户的请求。 把JSP页面中普通的HTML标记符号交给客户的浏览器执行显示。 负责处理JSP标记,并将有关的处理结果发送到客户的浏览器。 执行和%>之间的Java程序片（JSP页面中的动态部分），并把执行结果交给客户的浏览器显示。 当多个客户请求一个JSP页面时，Tomcat服务器为每个客户启动一个线程，该线程负责执行常驻内存的字节码文件来响应相应客户的请求。这些线程由Tomcat服务器来管理，将CPU的使用权在各个线程之间快速切换，以保证每个线程都有机会执行字节码文件 Tomcat目录结构及其功能 bin：二进制执行文件。里面最常用的文件是startup.bat，如果是 Linux 或 Mac 系统启动文件为 startup.sh。 conf:配置目录。里面最核心的文件是server.xml。可以在里面改端口号等。默认端口号是8080，也就是说，此端口号不能被其他应用程序占用。 lib：库文件。tomcat运行时需要的jar包所在的目录 logs：日志 temp：临时产生的文件，即缓存 webapps：web的应用程序。web应用放置到此目录下浏览器可以直接访问 work：编译以后的class文件。 JSP与Java Servlet的关系 Java Servlet是Java 语言的一部分，提供了用于服务器编程的API。Java Servlet就是编写在服务器端创建对象的Java类，习惯上称之为Servlet类，Servlet类的对象习惯上称之为一个servlet。 JSP技术就是以Java Servlet为基础，提供了Java Servlet的几乎所有好处，当客户请求一个JSP页面时，Tomcat服务器自动生成Java文件（如first1$jsp.java）、编译Java文件，并用编译得到的字节码文件在服务器端创建一个servlet。但是JSP技术不是Java Servlet技术的全部，它只是Java Servlet技术的一个成功应用。 对于某些Web应用，就可能需要JSP+Javabean+servlet来完成，即需要服务器再创建一些servlet对象，配合JSP页面来完成整个Web应用程序的工作。 小结 JSP技术不仅是开发Web应用的先进技术，而且是进一步学习相关技术的基础。 JSP引擎是支持JSP程序的Web容器，负责运行JSP，并将有关结果发送到客户端。目前流行的JSP引擎之一是Tomcat。 安装Tomcat服务器，首先要安装JDK，并需要设置Java_home环境变量。 JSP页面必须保存在Web服务目录中。Tomcat服务器的webapps下的目录都可以作为Web服务目录。如果想让webapps以外的其他的目录作为Web服务目录，必须要修改Tomcat服务器下conf文件夹中的server.xml文件，并重新启动Tomcat服务器。 当服务器上的一个JSP页面被第一次请求执行时，服务器上的JSP引擎首先将JSP页面文件转译成一个Java文件，再将这个Java文件编译生成字节码文件，然后通过执行字节码文件响应客户的请求。 当多个客户请求一个JSP页面时，Tomcat服务器为每个客户启动一个线程，该线程负责执行常驻内存的字节码文件来响应相应客户的请求。这些线程由Tomcat服务器来管理，将CPU的使用权在各个线程之间快速切换，以保证每个线程都有机会执行字节码文件。 "},"page/1015.html":{"url":"page/1015.html","title":"配置","keywords":"","body":"环境配置 配置java环境变量 https://zlogs.net/learn-java/page/1013.html 配置tomcat环境变量 下载 http://tomcat.apache.org/ Linux 1.解压 解压之后的文件放在一个目录假设为/usr/local/apache-tomcat-9.0.34目录，注意文件夹apache-tomcat-9.0.34里面就是bin、conf、lib那些，注意路径里面不要有中文字符和空格。 2.配置环境变量 给所有用户配置Tomcat环境 以root用户登录 sudo -i 修改配置文件系统级别变量 vim /etc/profile 按下insert键，然后移动到最后一行，添加 #configuration tomcat development enviroument CATALINA_HOME=/media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34 export PATH={% math_inline %}CATALINA_HOME/bin:{% endmath_inline %}PATH 然后按下esc键，输入:,输入wq退出 重新加载系统配置 source /etc/profile 给当前用户配置Tomcat环境 同理修改用户配置 vim ~/.bash_profile （注意修改上面命令只对bash作为shell有效，如果是zsh,则为vim ~/.zshrc） 3.启动与关闭 启动，输入 startup.sh 或者{% math_inline %}CATALINA_HOME/bin/startup.sh 如果能看到对应启动信息，则说明Tomcat环境变量配置成功 Using CATALINA_BASE: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34 Using CATALINA_HOME: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34 Using CATALINA_TMPDIR: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34/temp Using JRE_HOME: /media/zander/file/deepin/dev/java/jdk/jdk1.8.0_241 Using CLASSPATH: /media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34/bin/bootstrap.jar:/media/zander/file/deepin/dev/tomcat/apache-tomcat-9.0.34/bin/tomcat-juli.jar Tomcat started.#出现这样类似的表示成功，若提示无此命令则配置错误 关闭输入shutdown.sh 4.注意 1.启动后代开浏览器查看http://127.0.0.1:8080查看是否有tomcat默认页面， 如果8080端口被占用可能无法启动可使用sudo netstat -ntulp | grep 8080查看是否被占用，如果被占用，且必要可以修改tomcat的端口在安装目录/conf/server.xml的大概70行左右 改掉下面其他端口，可使用sudo netstat -ntulp | grep 其他端口查看将要替换的端口是否是空闲的 2.如果是linux桌面环境，系统变量配置，用户变量未配置，可能会出现直接进入目录点击startup.sh提示启动成功，或者用自动脚本进入启动提示成功，但是8080端口没有数据，查看当前用户使用的bash的是否添加环境变量 配置Vscode 1.安装插件 https://marketplace.visualstudio.com/items?itemName=adashen.vscode-tomcat 2.停掉已有tomcat服务 如果已经启动服务，执行自己的tomcat安装目录/bin/shutdown.sh或者{% endmath_inline %}CATALINA_HOME/bin/shutdown.sh，如果配置环境变量的话，直接shutdown.sh也可以 不然可能会报错正在摧毁协议处理器之类的。 3.新建项目 手动打开或者新建一个项目，新建一个test.jsp,里面填入下列内容 4.打包项目 在vscode里按ctrl+p组合键，输入>tomcat:generate并回车，生成.war文件 5.添加server 点击Tomcat servers添加符号，选择安装目录，点击打开 6.启动server 选择.war文件，右击启动 7. 打开网页访问测试 右击点开在浏览器打开 如果没有index.jsp的话会提示未找到 在后面输入我们创建的1.jsp即可访问 参考 https://www.runoob.com/jsp/jsp-setup.html https://www.jianshu.com/p/1355b54a5801 "},"page/1036.html":{"url":"page/1036.html","title":"目录","keywords":"","body":"目录 设置Web服务目录 简介 必须将编写好的JSP页面文件保存到Tomcat服务器的某个Web服务目录中，只有这样，远程的用户才可以通过浏览器访问该Tomcat服务器上的JSP页面。 人们常说的一个网站，实际上就是一个Web服务目录。 根目录 如果Tomcat服务器的安装目录是D:\\apache-tomcat-8.0.3，那么Tomcat的Web服务目录的根目录是D:\\apache-tomcat-8.0.3\\webapps\\Root 可以在浏览器输入Tomcat服务器的IP地址（或域名）、端口号和JSP页面的名字即可（必须省略Web根目录的名字） 将下面内容保存为helloworld.jsp,放在安装目录/webapps/ROOT 在开启tomcat服务的情况下,访问http://127.0.0.1:8080/helloworld.jsp即可看到内容。 webapps下的Web服务目录 Tomcat服务器安装目录webapps下的任何一个子目录都可以作为一个Web服务目录。比如在webapps下新建子目录ch1，那么ch1就成为一个Web服务目录。 将JSP页面文件保存到webapps下的Web服务目录中，那么应当在浏览器器的地址栏中输入Tomcat服务器的IP地址（或域名）、端口号、Web服务目录和JSP页面的名字。 将下面内容保存为helloworld.jsp,放在安装目录/webapps/ch1 在开启tomcat服务的情况下,访问http://127.0.0.1:8080/ch1/helloworld.jsp即可看到内容。 自定义服务目录（新建Web服务目录） 可以将Tomcat服务器所在计算机的某个目录（非webapps下的子目录）设置成一个Web服务目录，并为该Web服务目录指定虚拟目录，即隐藏Web服务目录的实际位置，用户只能通过虚拟目录访问Web服务目录中的JSP页面。 打开conf文件夹中的主配置文件server.xml，在的前面加入： 将下面内容保存为helloworld.jsp,保存到任意目录如D:\\MyBook\\zhang以及C:\\wang中， 目的：让用户分别使用apple和cloud虚拟目录访问此Web服务目录 用记事本打开conf文件夹中的主配置文件server.xml，在的前面加入 保存并重新启动 tomcat服务器 访问http://127.0.0.1:8080/apple/helloworld.jsp即可看到内容 相对目录（服务目录内的） Web服务目录的下的目录称为该Web服务目录下的相对Web服务目录。 比如，在Web服务目录D:\\MyBook\\zhang下再建立一个子目录image，将example.jsp文件保存到image中。 按照上一步自定义web服务目录，将D:\\MyBook\\zhang设置为自定义web服务目录，虚拟目录为apple 那么可以在浏览器的地址栏中输入http://127.0.0.1:8080/apple/image/example.jsp即可看到内容 Tag文件的存储目录 如果某个Web服务目录下的JSP页面准备调用一个Tag文件，那么我们必须在该Web服务目录下，建立如下的目录结构： Web服务目录\\WEB-INF\\tags ch3\\WEB-INF\\tags 其中的WEB-INF和tags都是固定的目录名称， 而tags下的子目录的名称可由用户给定。 "},"page/1037.html":{"url":"page/1037.html","title":"文件","keywords":"","body":"文件 "},"page/1013.html":{"url":"page/1013.html","title":"语法","keywords":"","body":"语法 JSP页面 在传统的HTML页面文件中加入Java程序片和JSP标签，就构成了一个JSP页面。 JSP页面可由5种元素组合而成： HTML部分 ① 普通的HTML标记符； JSP部分 ② JSP标记，如指令标记、动作标记； Java部分 ③ 变量和方法的声明； ④ Java程序片； ⑤ Java表达式 ； JSP页面的运行原理： 把JSP页面中普通的HTML标记符号，交给客户的浏览器执行显示。 JSP标记、数据和方法声明、Java程序片由Tomcat服务器负责执行，将需要显示的结果发送给客户的浏览器。 Java表达式由Tomcat服务器负责计算，将结果转化为字符串，交给客户的浏览器负责显示。 JSP的5种元素 程序片创建Date对象： \"+date+\"\"); int m=100; %> 的因子之和是(不包括): JSP的5种元素 程序片创建Date对象： \"+date+\"\"); /* java块注释-在程序片内--客户端不可见 */ int m=100; %> 的因子之和是(不包括): Tag文件 简介 Tag文件是一种特殊的文本文件 Tag文件和JSP文件很类似，可以被JSP页面动态加载调用 目的是提高代码复用 有点像，调用函数时，被调用的函数，将被调用函数保存到一个文件以复用，并且用户无法直接访问 用户可访问性 用户不能通过该Tag文件所在Web服务目录直接访问这个Tag文件 文件结构 Tag文件是扩展名为.tag的文本文件，其结构几乎和JSP文件相同。 一个Tag文件中可以有普通的HTML标记符、某些特殊的指令标记、成员变量和方法的声明、Java程序片和Java表达式。 一个Tag文件对应着一个标记，该标记被习惯地称为Tag标记，将存放在同一目录中的若干个Tag文件所对应的Tag标记的全体称之为一个自定义标记库或简称为标记库。 这是一个Tab文件，负责计算1～100内的偶数之和： "},"page/1016.html":{"url":"page/1016.html","title":"HTML部分","keywords":"","body":"HTML部分 "},"page/1019.html":{"url":"page/1019.html","title":"标记","keywords":"","body":"标记 JSP页面可以含有HTML标记，当用户通过浏览器请求一个JSP页面时，Tomcat服务器将该JSP页面中的HTML标记直接发送到用户的浏览器，由用户的浏览器负责执行这些HTML标记。而JSP页面中的变量声明、程序片以及表达式由Tomcat服务器处理后，再将有关的结果用文本方式发送到用户端的浏览器。 HTML是Hypertext Marked Language的缩写，即超文本标记语言。 "},"page/1020.html":{"url":"page/1020.html","title":"注释","keywords":"","body":"注释 注释可以增强JSP页面的可读性，使JSP页面易于维护。JSP页面中的注释可分为三种。 JSP注释 HTML注释 Java注释 客户端可见性 不可见 可见 不可见 位置 主体部分，除了java程序片、表达式、声明内部 主体部分，除了java程序片、表达式、声明内部 java程序片、表达式、声明内部 形式 //单行注释 /* */多行注释 注意 不要在java程序片、表达式、声明内部 用户可见，java程序片、表达式、声明内部 不要把结束标识%>给注释掉了 JSP的5种元素 程序片创建Date对象： \"+date+\"\"); /* java块注释-在程序片内--客户端不可见 */ int m=100; %> 的因子之和是(不包括): HTML注释 位置 主体部分，除了java程序片、表达式、声明内部 形式 HTML注释：在标记符号和-->之间加入注释内容： 用户可见性 JSP引擎把HTML注释交给用户，因此用户通过浏览器查看JSP页面的源文件时，能够看到HTML注释。 客户端可见 Java注释 位置 程序片内、表达式、声明部分 注意这三部分结尾标识%>不可以在注释里面否则会报错 形式 //单行注释 /* */多行注释 客户端可见性 客户端不可见 JSP注释 位置 主体部分，除了java程序片、表达式、声明内部 形式 JSP 注释：在标记符号和--%>之间加入注释内容： 用户可见性 JSP引擎忽略JSP注释，即在编译JSP页面时忽略JSP注释。 客户端不可见 "},"page/1017.html":{"url":"page/1017.html","title":"Java部分","keywords":"","body":"Java部分 "},"page/1021.html":{"url":"page/1021.html","title":"声明","keywords":"","body":"声明 在和%>标记符号之间声明变量和方法。 "},"page/1022.html":{"url":"page/1022.html","title":"变量声明","keywords":"","body":"变量声明 位置 在和%>之间放置Java的变量声明语句。 允许类型 变量的类型可以是Java语言允许的任何数据类型，将这些变量称为JSP页面的成员变量。 有效区域 和%>之间声明的变量在整个JSP页面内都有效， 与、%> 标记符在JSP页面中所在的书写位置无关。 当多个用户请求一个JSP页面时，JSP引擎为每个用户启动一个线程，这些线程由JSP引擎来管理，这些线程共享JSP页面的成员变量，因此任何一个用户对JSP页面成员变量操作的结果，都会影响到其他用户。 如果一个用户在执行Java程序片时调用JSP页面的方法操作成员变量，可能不希望其他用户也调用该方法操作成员变量，以免对其产生不利的影响,那么就应该将操作成员变量的方法用synchronized关键字修饰。 JSP引擎将JSP页面转译成Java 文件时，将、%> 标记符之间声明的变量作为类的成员变量，这些变量占有的内存空间直到JSP引擎关闭才释放。 利用成员变量被所有用户共享这一性质，实现了一个简单的计数器 简单网页访客数统计 您是第 个访问本站的客户。 通过synchronized方法操作一个成员变量来实现一个简单的计数器。 "},"page/1023.html":{"url":"page/1023.html","title":"方法声明","keywords":"","body":"方法声明 位置&有效范围 在和%>标记符号之间定义方法， 所定义的方法在整个JSP页面有效，可以在Java程序片中被调用。 注意 方法内声明的变量只在该方法内有效， 当方法被调用时，方法内声明的变量被分配内存，方法被调用完毕即可释放这些变量所占的内存。 在和%>之间定义了两个方法：multi (int x,int y)和div (int x,int y)，然后在程序片中调用这两个方法 调用getLength方法计算半径是\"+r+\"的园的周长：\"); double length=getLength(r); out.println(length); %> "},"page/1024.html":{"url":"page/1024.html","title":"程序片","keywords":"","body":"程序片 位置 在和%>之间插入Java程序片。 执行顺序 一个JSP页面可以有许多程序片,这些程序片将被JSP引擎按顺序执行。 局部变量 位置 程序片中声明的变量称为JSP页面的局部变量 。 分配方式 多个客户请求一个JSP页面时,Java程序片将被执行多次，分别在不同的线程中执行 ，分配各自局部变量 有效区域 一个JSP页面中的Java程序片会按其在页面中的顺序被执行,而且某个Java程序片中声明的局部变量在其后继的所有Java程序片以及表达式部分内都有效。 利用Java程序片的这个性质,有时候可以将一个Java程序片分割成几个Java程序片,然后在这些Java程序片之间再插入其他标记元素。 HTML标记 HTML标记 请输入E-mail： 您的E-mail地址中没有@。 您的E-mail地址含有非法的空格。 您的E-mail地址有两个以上的符号：@。 \"+str); %> 您的E-mail地址书写正确。 "},"page/1025.html":{"url":"page/1025.html","title":"表达式","keywords":"","body":"表达式 位置 可以在和%>之间插入一个表达式 是一个完整的符号，和=之间不要有空格 要求 这个表达式必须能求值 不可插入语句 注意 表达式的值由服务器负责计算，并将计算结果用字符串形式发送到用户端显示。 在JSP页面中，表达式的值被表示成一个字符串的形式，即Tomcat引擎将表达式的结果转换成字符串，然后发送给用户的浏览器。因此，在编写JSP页面时，要把Java表达式按普通的文本来使用。 Sin()除以等于 的平方是： 乘以等于 的平方根等于 大于吗？回答：x%> "},"page/1026.html":{"url":"page/1026.html","title":"内置对象","keywords":"","body":"内置对象 JSP内置对象 有些成员变量不用声明就可以在JSP页面的脚本（Java程序片和Java表达式）中使用，这就是所谓的内置对象。 内置对象有：resquest、response、session、out 、 application 。 "},"page/1027.html":{"url":"page/1027.html","title":"request","keywords":"","body":" 简介 在JSP中，内置对象request封装了用户请求页面时所提交的信息，该对象调用相应的方法可以获取封装的信息. 即request对象可以获取用户提交的信息。 JSP页面使用request对象获取用户提交的数据，然后使用Tag标记调用Tag文件，并将必要的数据传递给Tag文件。Tag文件负责处理数据，根据需要将处理结果显示给用户或返回给调用它的JSP页面。 方法 request对象获取用户提交信息的最常用的方法是getParameter(String s). 可以用内置对象request对象来获取请求所提交的各类信息，request对象的常用方法如下： getProtocol()：获取请求使用的通信协议，如http/1.1等。 getServletPath()：获取请求的JSP页面所在的目录。 getContentLength()：获取HTTP请求的长度。 getMethod()：获取表单提交信息的方式，如POST或GET。 getHeader(String s)：获取请求中头的值。 getHeaderNames()：获取头名字的一个枚举。 getHeaders(String s)：获取头的全部值的一个枚举。 getRemoteAddr()：获取客户的IP地址。 getRemoteHost()：获取客户机的名称(如果获取不到，就获取IP地址). getServerName()：获取服务器的名称。 getServerPort()：获取服务器的端口号。 getParameterNames()：获取表单提交的信息体部分中name参数值的一个枚举. 注意 编码问题 当用request对象获取用户提交的汉字字符时,会出现乱码问题,所以对含有汉字字符的信息必须进行特殊的处理。 首先,将获取的字符串用ISO-8859-1进行编码，并将编码存放到一个字节数组中 然后再将这个数组转化为字符串对象即可 String str=request.getParameter(\"girl\"); byte b[]=str.getBytes(\"ISO-8859-1\"); str=new String(b); 用户在请求JSP页面时，通常会使用HTML表单提交信息，表单的一般格式是： 提交的具体内容 例如用户提交信息表单： tom.jsp页面可以使用内置request对象获得用户提交的信息request.getParameter(\"boy\"); demo.jsp页面通过表单向tree.jsp页面提交信息I am a student，tree.jsp页面通过request对象获取表单提交的信息，包括text的值以及按钮的值 demo.jsp tree.jsp 获取文本框提交的信息： 获取按钮的名字： 效果 demo.jsp页面通过表单向自己提交一个正数，demo.jsp页面获取表单提交的正数，并计算这个数的平方根。 表单中的action是所请求的页面，如果是当前页面，可以用双引号：\"\"代替当前页面，注意双引号中不能含有空格 demo.jsp =0){ r=Math.sqrt(number) ; out.print(\"\"+number+\"的平方根：\"); out.print(\"\"+r); } else out.print(\"\"+\"请输入一个正数\"); } catch(NumberFormatException e){ out.print(\"\"+\"请输入数字字符\"); } %> 效果 使用request对象的一些常用方法 demo.jsp mess.jsp 用户使用的协议是: 获取接受用户提交信息的页面： 接受用户提交信息的长度： 用户提交信息的方式： 获取HTTP头文件中User-Agent的值： 获取HTTP头文件中accept的值： 获取HTTP头文件中Host的值： 获取HTTP头文件中accept-encoding的值： 获取用户的IP地址： 获取用户机的名称： 获取服务器的名称： 获取服务器的端口号： 获取用户端提交的所有参数的名字： 获取头名字的一个枚举： 获取头文件中指定头名字的全部值的一个枚举： 文本框text提交的信息： 按钮的名字： 效果 用户通过demo.jsp中的表单将三角形的三边的长度提交给get.jsp，get.jsp使用Tag标记调用Tag文件Computer.tag，并将三角形三边的长度传递给Computer.tag，Computer.tag文件负责计算三角形的面积，并将计算结果返回给get.jsp页面。 demo.jsp 输入三角形三边： 边A: 边B: 边C: get.jsp \" b=\"\" c=\"\"/> 边A 边B 边C 面积 /WEB-INF/tags/Computer.jsp 效果 demo.jsp 效果 get.jsp "},"page/1028.html":{"url":"page/1028.html","title":"response","keywords":"","body":"response 可以用response对象对用户的请求做出动态响应，向用户端发送数据。 动态响应contentType属性 由于page指令只能为contentType属性指定一个值来决定响应的MIME类型。 如果想动态地改变这个属性的值来响应用户,就需要使用response对象的setContentType(String s)方法来改变contentType的属性值。 public void setContentType(String s)方法动态设置响应的MIME类型，参数s可取: text/html、text/plain image/gif、image/x-xbitmap、image/jpeg、image/pjpeg、 application/x-shockwave-flash application/vnd.ms-powerpoint、 application/vnd.ms-excel、application/msword。 当用户单击按钮，选择将当前页面保存为一个Word文档时,JSP页面动态地改变contentType属性的值为application/msword。这时,用户的浏览器会提示用户用MS-Word程序来显示或保存当前页面 demo.jsp 我正在学习response对象的 setContentType方法 将当前页面保存为word文档吗？ 效果 用response对象将contentType属性的值设为image/jpeg，使得用户可以看到Java程序片所绘制的图形 demo.jsp 观看旋转的椭圆 效果 response的HTTP文件头 response对象可以使用方法：addHeader(String head,String value);或使用方法：setHeader(String head ,String value);动态添加新的响应头和头的值，并将这些头发送给用户的浏览器。如果添加的头已经存在，则先前的头被覆盖。 response对象添加一个响应头refresh，其头值是5，那么用户收到这个头之后，5秒钟后将再次刷新该页面，导致该网页每5秒刷新一次 。 demo.jsp 现在的时间是： 效果 response重定向 在某些情况下，JSP引擎在响应用户时，可能需要将用户重新引导至另一个页面。 例如，如果用户输入的表单信息不完整，就会再次被引导到该表单的输入页面。 使用response对象的sendRedirect(URL url)方法实现用户的重定向。 forward动作标记不改变url,response改变 用户在demo.jsp页面填写表单提交给verify.jsp页面，如果填写的表单不完整就会被重新定向到demo.jsp页面 demo.jsp ÌîÐ´ÐÕÃû£º verify.jsp 　 效果 response的状态行 当JSP引擎对用户请求进行响应时，它发送的首行称做状态行。 状态行包括3位数字的状态代码和对状态代码的描述（称做原因短语）。 使用setStatus(int n)设置响应的状态行来防止本网站的JSP页面被“盗链”。other.jsp存放在Web服务目录ch3中(一个网站)；sameWebOne.jsp和sameWebTwo.jsp存放在同一Web服务目录ch4中(一个网站)。other.jsp和sameWebOne.jsp都提供了关于sameWebTwo.jsp的超链接。sameWebTwo.jsp允许sameWebOne.jsp通过其中的超链接访问它,但不允许other.jsp通过其中的超链接访问它 。 sameWebTwo.jsp 欢迎访问本页面! 您来自: other.jsp 和 sameWebOne.jsp 我是ch4服务目录中的页面 单击下面的超链接： 访问sameWebTwo.jsp 效果 "},"page/1029.html":{"url":"page/1029.html","title":"session","keywords":"","body":"session HTTP协议是一种无状态协议。一个用户向服务器发出请求（request），然后服务器返回响应（response），连接就被关闭了，在服务器端不保留连接的有关信息，因此当下一次连接时，服务器已没有以前的连接信息了，无法判断这一次连接和以前的连接是否属于同一用户。 内置session(会话)对象记录有关连接的信息.由Tomcat服务器负责创建。 session对象的Id 当一个用户首次访问Web服务目录中的某个JSP页面时，JSP引擎为其产生一个session对象。为用户产生的session对象调用相应的方法可以存储用户在访问各个页面期间提交的各种信息。 为用户产生的session对象中含有一个String类型的Id号，JSP引擎同时将这个Id号发送到用户端、存放在用户的浏览器的Cookie中。 每个用户都对应着一个session对象（该用户的会话），不同用户的session对象互不相同，即具有不同的Id号码。 用户在服务器的Web服务目录ch4中的三个页面first.jsp、second和third.jsp之间进行连接，三个页面的session对象是完全相同的。其中，first.jsp存放在ch4中，second.jsp存放在ch4的子目录two中，third.jsp存放在ch4的子目录three中。用户首先访问first.jsp页面，从这个页面再连接到second.jsp页面，然后从second.jsp再连接到third.jsp页面。first.jsp、second和third.jsp的效果图如图4.11（a），4.11（b），4.11（c） first.jsp 我是first.jsp页面,输入你的姓名连接到second.jsp 您的session对象的ID是：\"+id); %> second.jsp 我是second.jsp页面 \"+id); %> 单击超链接，连接到third.jsp的页面。 欢迎去third.jsp页面！ third.jsp 我是third.jsp页面 \"+id); %> 单击超链接，连接到first.jsp的页面。 欢迎去first.jsp！ session对象与URL重写 如果用户端不支持Cookie，那么用户在不同网页之间的session对象可能是互不相同的，因为如果服务器无法将Id存放到用户端，就不能建立session对象和用户的一一对应关系。 可以通过URL重写来实现session对象的惟一性。所谓URL重写，就是当用户从一个页面重新链接到另一个页面时，通过向这个新的URL添加参数，把session对象的Id传带过去，这样就可以保障用户在该网站各个页面中的session对象是完全相同的。可以使用response对象调用encodeURL()或encodeRedirectURL()方法实现URL重写. jiafei.jsp、tom.jsp和jerry.jsp之间实行URL重写，jiafei.jsp存放在ch4中，tom.jsp存放在ch4的子目录two中，jerry.jsp存放在ch4的子目录three中 jiafei.jsp 我是jiafei.jsp页面,输入你的姓名连接到tom.jsp 您的session对象的ID是：\"+id); %> \" method=post name=form> tom.jsp 我是tom.jsp页面 \"+id); %> 单击超链接，连接到jerry.jsp的页面。 \"> 欢迎去jerry.jsp页面！ jerry.jsp 我是jerry.jsp页面 \"+id); %> 单击超链接，连接到jiafei.jsp的页面。 \"> 欢迎去jiafeit.jsp！ session对象存储数据 session对象使用下列方法处理数据： （1）public void setAttribute(String key, Object obj) session对象可以调用该方法将参数Object指定的对象obj添加到session对象中，并为添加的对象指定了一个索引关键字，如果添加的两个对象的关键字相同，则先前添加的对象被清除。 （2）public Object getAttibute(String key) 获取session对象含有的关键字是key的对象。由于任何对象都可以添加到session对象中，因此用该方法取回对象时，应强制转化为原来的类型。 （3）public Enumeration getAttributeNames() session对象调用该方法产生一个枚举对象，该枚举对象使用nextElemets()遍历session中的各个对象所对应的关键字。 （4）public long getCreationTime() session对象调用该方法可以获取该对象创建的时间，单位是毫秒。 （5）public void removeAttribute(String name) session对象调用该方法移掉关键字key对应的对象. 3个页面demo.jsp，shop.jsp和account.jsp，我们使用session对象存储顾客的姓名和购买的商品 demo.jsp 输入您的姓名连接到第一百货：shop.jsp shop.jsp 这里是第一百货。输入您想购买的商品连接到结账：account.jsp。 account.jsp 这里是结账处,的姓名是： 您选择购买的商品是： 效果 session对象在Tag文件中使用 JSP页面通过调用Tag文件可以实现代码的复用，那么在反复调用Tag文件时，Tag文件就可以对session对象中存储的数据进行处理，并将必要的结果返回给JSP页面。 猜数字的小游戏。当用户访问服务器上的demo.jsp页面时，服务器随机分配给用户一个1至100之间的整数，然后将这个整数存在用户的session对象中。 demo.jsp 随机分给了你一个1到100之间的数，请猜！ 去猜测这个数 guess.jsp \" /> 当前猜测结果： 重新获得随机数 输入您的猜测： WEB-INF/tag/GuessTag.tag realnumber){ int n=((Integer)session.getAttribute(\"count\")).intValue(); n=n+1; session.setAttribute(\"count\",new Integer(n)); mess=\"您猜大了,这是第\"+n+\"次猜测\"; } else if(guessNumber session对象的生存期限 一个用户在某个web服务目录的session对象的生存期限 依赖于session对象是否调用invalidate()方法使得session无效 依赖于session对象达到了设置的最长的“发呆”状态时间 依赖于服务器是否被关闭。 重新设置各个Web服务目录下的session对象的最长“发呆”时间。打开Tomcat安装目录conf目录下的配置文件web.xml，找到 30 将其中的30修改成所要求的值即可,如果时间修改为负数,发呆时间不受限制。 session对象可以使用下列方法获取或设置和生存时间有关的信息： public long getCreationTime() 获取session创建的时间，单位是毫秒。 public long getLastAccessedTime() 获取session最后一次被操作的时间。 public int getMaxInactiveInterval() 获取session（单位是秒）。最长的“发呆”时间 public void setMaxInactiveInterval(int interval) 设置session最长的“发呆”时间 public boolean isNew() 判断session是否是一个新建的对象。 invalidate() 使session无效。 session对象使用setMaxInactiveInterval(int interval)方法设置最长的“发呆”状态时间为10秒。用户可以通过刷新页面检查是否达到了最长的“发呆”时间，如果两次刷新之间的间隔超过10秒，用户先前的session将被取消，用户将获得一个新的session对象。 demo.jsp 如果你第一次访问当前web服务目录，您的会话是新的\"); out.println(\"如果你不是首次访问当前web服务目录，您的会话不是新的\"); out.println(\"会话是新的吗？：\"+boo); out.println(\"欢迎来到本页面，您的session允许的最长发呆时间为\"+ session.getMaxInactiveInterval()+\"秒\"); out.println(\"您的session的创建时间是\"+new Date(session.getCreationTime())); out.println(\"您的session的Id是\"+session.getId()); Long lastTime=(Long)session.getAttribute(\"lastTime\"); if(lastTime==null){ long n=session.getLastAccessedTime(); session.setAttribute(\"lastTime\",new Long(n)); } else{ long m=session.getLastAccessedTime(); long n=((Long)session.getAttribute(\"lastTime\")).longValue(); out.println(\"您的发呆时间大约是\"+(m-n)+\"毫秒,大约\"+(m-n)/1000+\"秒\"); session.setAttribute(\"lastTime\",new Long(m)); } %> 使用session设置时间间隔 为了限制用户在很短的时间间隔内不断地使用某页面所提供的某种功能，而影响其他用户使用该页面所提供的功能，因此我们可以利用用户的session来设置用户使用当前页面所提供功能的间隔时间，从而限制该用户等待若干“时间”后，再次使用该页面所提供的功能。 demo.jsp提供计算字符串长度的功能，用户可以通过表单提交一个字符串给当前页面。demo.jsp利用用户的session来设置用户使用当前页面的所提供功能的间隔时间（间隔时间是5秒） demo.jsp 反复使用该页面提供的计算字符串长度功能的间隔时间必须大于5秒。 输入一个字符串，页面将计算它的长度： 计数器 使用session实现计数器的步骤是：当一个用户请求Web服务目录下的任何一个JSP页面时，首先检查该用户的session对象中是否已经有计数，如果没有计数，立刻将当前的计数增1，并将计数存到用户的session中，否则不改变当前的计数。 Web服务目录ch4有两个JSP页面：one.jsp、two.jsp和一个tag文件：Count.tag 。Count.tag文件负责计数。one.jsp、two.jsp使用Count.tag实现计数。用户首次请求one.jsp和two.jsp的任何一个，都会使得网站的计数增1 one.jsp 欢迎访问本站 欢迎去two.jsp参观 two.jsp 欢迎访问本站 欢迎去one.jsp参观 WEB-INF/tags/Count.tag 您是第 个访问本网站的用户。 "},"page/1030.html":{"url":"page/1030.html","title":"application","keywords":"","body":"application 任何客户在所访问的服务目录的各个页面浏览时，application对象都是同一个. application对象的常用方法 （1）public void setAttribute(String key, Object obj) application对象可以调用该方法将参数Object指定的对象 obj添加到application对象中，并为添加的对象指定了一个索引关键字，如果添加的两个对象的关键字相同，则先前添加对象被清除。 （2）public Object getAttibue(String key) 获取application对象含有的关键字是key的对象。由于任何对象都可以添加到application对象中，因此用该方法取回对象时，应强制转化为原来的类型。 （3）public Enumeration getAttributeNames() application对象调用该方法产生一个枚举对象，该枚举对象使用nextElemets()遍历application中的各个对象所对应的关键字。 （4）public void removeAttribue(String key) 从当前application对象中删除关键字是key的对象。 （5）public String getServletInfo() application对象可以调用该方法获取Servlet编译器的当前版本的信息。 用户通过submit.jsp页面向messagePane.jsp页面提交姓名、留言标题和留言内容，messagePane.jsp页面获取这些内容后，用同步方法将这些内容添加到一个向量中，然后将这个向量再添加到application对象中。当用户单击查看留言板时，showMessage.jsp页面负责显示所有用户的留言内容，即从application对象中取出向量，然后遍历向量中存储的信息 。 submit.jsp 输入您的名字： 输入您的留言标题： 输入您的留言： messagePane.jsp v=new Vector(); int i=0; ServletContext application; synchronized void sendMessage(String s){ application=getServletContext();; v.add(s); application.setAttribute(\"Mess\",v); } %> 返回留言板 查看留言板 showMessage.jsp v=(Vector)application.getAttribute(\"Mess\"); out.print(\"\"); out.print(\"\"); out.print(\"\"+\"留言者姓名\"+\"\"); out.print(\"\"+\"留言标题\"+\"\"); out.print(\"\"+\"留言时间\"+\"\"); out.print(\"\"+\"留言内容\"+\"\"); for(int i=0;i\"); String message=v.elementAt(i); byte bb[]=message.getBytes(\"iso-8859-1\"); message=new String(bb); String a[]=message.split(\"#\"); out.print(\"\"); int number=a.length-1; for(int k=0;k\"+a[k]+\"\"); else out.print(\"\"+a[k]+\" \"); } out.print(\"\"); } out.print(\"\"); %> 返回留言板 "},"page/1031.html":{"url":"page/1031.html","title":"out","keywords":"","body":"out out对象是一个输出流,用来向用户端输出数据。 out对象可调用如下的方法用于各种数据的输出， out.print(Boolean)，out.println(Boolean) 用于输出一个布尔值。 out.print(char)，out.println(char) 输出一个字符。 out.print(double)，out.println(double) 输出一个双精度的浮点数。 out.print(float)，out.println(float) 用于输出一个单精度的浮点数。 out.print(long)，out.println(long) 输出一个长整型数据。 out.print(String)，out.println(String) 输出一个字符串对象的内容。 out.newLine() 输出一个换行符。 out.flush() 输出缓冲区里的内容。 out.close() 关闭流 使用out对象向用户输出包括表格等内容的信息 demo.jsp 这是标题1字体的大小\"); out.println(\"这是标题2字体的大小\"); out.print(\"\"); out.println(a); out.println(b); out.println(c); %> 以下是一个表格 \"); out.println(\"\"); out.println(\"\"); out.println(\"\"+\"姓名\"+\"\"); out.println(\"\"+\"性别\"+\"\"); out.println(\"\"+\"出生日期\"+\"\"); out.println(\"\"); out.println(\"\"); out.println(\"\"+\"刘甲一\"+\"\"); out.println(\"\"+\"男\"+\"\"); out.println(\"\"+\"1978年5月\"+\"\"); out.println(\"\"); out.println(\"\"); out.println(\"\"+\"林　霞\"+\"\"); out.println(\"\"+\"女\"+\"\"); out.println(\"\"+\"1979年8月\"+\"\"); out.println(\"\"); out.println(\"\"); out.print(\"\") ; %> "},"page/1018.html":{"url":"page/1018.html","title":"JSP部分","keywords":"","body":"JSP部分 "},"page/1033.html":{"url":"page/1033.html","title":"标记","keywords":"","body":"标记 "},"page/1034.html":{"url":"page/1034.html","title":"指令标记","keywords":"","body":"指令标记 形式 适应于JSP页面的指令标记 page 指令 作用 page 指令用来定义整个JSP页面的一些属性和这些属性的值 属性值用单引号或双引号括起来。 数量 可以用一个page指令指定多个属性的值 ,也可以使用多个page指令分别为每个属性指定值 . 有效性 page指令的作用对整个JSP页面有效， 与其书写的位置无关，习惯把page指令写在JSP页面的最前面。 属性 page 指令标记可以指定如下属性的值 contentType import language session buffer auotFlush isThreadSafe 或 … … language属性 作用 language属性定义JSP页面使用的脚本语言， 可取值 该属性的值目前只能取\"java\"。 默认值 JSP页面默认有如下 page指令 import属性 作用 该属性的作用是为JSP页面引入Java运行环境提供的包中的类， 这样就可以在JSP页面的程序片部分、变量及函数声明部分、表达式部分使用包中的类。 可取值 使用page指令可以为import属性指定多个值，这些值用逗号分隔。 该属性的值可以是某包中的所有类或一个具体的类。 默认值 JSP页面默认import属性已经有java.lang.*、 javax.servlet.*、javax.servlet.jsp.*、javax.servlet.http.*等值 例如: 当为import指定多个属性值时，比如： 那么，JSP引擎把JSP页面转译成的Java文件中会有如下的import语句：import java.util.*; import java.io.*; contentType属性 作用 contentType 属性值确定JSP页面响应的MIME（Multipurpose Internet Mail Extention）类型 和JSP页面字符的编码。 当用户请求一个JSP页面时，Tomcat服务器负责解释执行JSP页面，并将某些信息发送到用户的浏览器，以便用户浏览这些信息。Tomcat服务器同时负责通知用户的浏览器使用怎样的方法来处理所接收到的信息。 可取值 属性值的一般形式是“MIME类型” 或 \"MIME类型;charset=编码\" 默认值 如果不使用page指令为contentType指定一个值，那么contentType属性的默认值是 \"text/html ; charset=ISO-8859-1“ 注意 不允许两次使用page 指令给contentType属性指定不同的属性值 . ISO-8859-1不支持中文需要改成GB2312或UTF-8 例如: 用户的浏览器启用HTML解析器来解析执行所接收到的信息 用户的浏览器启用本地的MS-Word应用程序来解析执行收到的信息 使用html处理所接受到的信息。 启动MS-Word应用程序处理所接受到的信息。 session属性 作用 session 属性用于设置是否需要使用内置的session对象。 可取值 session的属性值可以是true或false。 默认值 session属性默认的属性值是true。 buffer属性 作用 内置输出流对象out负责将服务器的某些信息或运行结果发送到用户端显示。 buffer属性用来指定out设置的缓冲区的大小或不使用缓冲区。 可取值 buffer属性可以取值具体大小或者\"none\"即设置out不使用缓冲区。 默认值 buffer属性的默认值是8kb autoFlush属性 作用 autoFlush 属性指定out的缓冲区被填满时，缓冲区是否自动刷新。 可取值 autoFlush可以取值true或false。 当autoFlush属性取值false时，如果out的缓冲区填满，就会出现缓存溢出异常。 默认值 autoFlush属性的默认值是true。 注意 当buffer的值是\"none\"时，autoFlush的值就不能设置成false isThreadSafe属性 作用 isThreadSafe属性用来设置JSP页面是否可多线程访问。 可取值 isThreadSafe的属性值可取true或false。 当isThreadSafe属性值设置为true时，JSP页面能同时响应多个用户的请求； 当isThreadSafe属性值设置成false时，JSP页面同一时刻只能响应一个用户的请求，其他用户须排队等待。 默认值 isThreadSafe属性的默认值是true。 info属性 作用 其目的是为JSP页面准备一个常用且可能要经常修改的字符串。 属性值 info属性的属性值是一个字符串 可以在JSP页面中使用方法：getServletInfo();获取info属性的属性值。 当JSP页面被转译成Java文件时，转译成的类是Servlet的一个子类，所以在JSP页面中可以使用Servlet类的方法：getServletInfo()。 使用getServletInfo()方法获取info的属性值，（需要将一幅图像tsinghua.jpg存放到服务目录的image文件夹中）。 \"> 出版社是中国著名出版社 是全国著名的高等学府 tag标记 必须先使用taglib指令标记引入该Web服务目录下的标记库，才能使用对应标记库里面的标记 下面为在jsp文件中使用tag标记 有无标记体 不带标记体，即来调用相应的Tag文件 其中前缀为该Tag文件所在taglib的prefix属性指定 其中Tag标记为对应的Tag文件的文件名，不带.tag后缀 带标记体 标记体 ，即 标记体 当JSP页面调用一个Tag文件时可能希望动态地向该Tag文件传递信息，那么就可以使用带有标记体的Tag标记来执行一个Tag文件，Tag标记中的“标记体”就会传递给相应的Tag文件，这个Tag文件通过使用 和使用attribute区别 有无传递引用 不传递引用 不带标记体，即来调用相应的Tag文件 带标记体 标记体 ，即 标记体 传递引用 不带标记体，即来调用相应的Tag文件 其中对象名字为attribute指令中，name属性的值 使用不带标记体 demo.jsp 以下是调用Tag文件的效果： 以下是调用Tag文件的效果： /WEB-INF/tags/OddSUM.tag /WEB-INF/tags/geng/EvenSum.tag 这是一个Tab文件，负责计算1～100内的偶数之和： 效果 使用带标记体 demp.jsp页面调用Show.tag文件，而且通过标记体向Show.tag文件传递文本数据。 Show.tag文件使用处理demo.jsp页面传递过来的文本数据，将该文本数据循环显示3次并逐次增大文本字体的字号。 demo.jsp 北京奥运圆满成功! I Love this Game! 欢迎您! /WEB-INF/tags/Show.tag > 效果 适应于JSP页面和Tag文件的指令标记 include 指令 作用 对JSP文件 include指令标记的作用是在JSP页面出现该指令的位置处，静态插入一个文件. 对Tag文件 在Tag文件中也有和JSP文件类似的include指令标记，其使用方法和作用与JSP文件中的include指令标记类似。 include指令标记的作用是在Tag文件中出现该指令的位置处，静态插入一个文件。 使用include指令可以实现代码的复用。 语法格式 注意 所谓静态插入，就是当前JSP页面和插入的文件合并成一个新的JSP页面，然后JSP引擎再将这个新的JSP页面转译成Java文件。因此，插入文件后，必须保证新合并成的JSP页面符合JSP语法规则。 比如，合并后的JSP页面不能两次使用page指令为contentType属性设置不同的属性值，导致出现语法错误。 file属性 属性值 文件URL 如果该文件和当前JSP页面在同一Web服务目录中，那么文件的URL就是文件的名字； 如果该文件在JSP页面所在的Web服务目录的一个子目录中，比如fileDir子目录中，那么文件的URL就是fileDir/文件的名字。 demo.jsp 请输入一个正数,单击按钮求这个数的平方根。 computer.jsp \"+\"请输入数字字符\"); } %> taglib指令 作用 JSP文件 使用taglib指令标记引入该Web服务目录下的标记库。 Tag文件 一个Tag文件可以使用Tag标记来调用其它的Tag文件。 Tag文件必须使用taglib指令引入该Web服务目录下的标记库，才可以使用Tag标记来调用相应的Tag文件。 格式 引入标记库 数量 一个JSP页面可以使用几个taglib指令标记引入若干个标记库 注意 导入的是一个文件夹，并不是某一个具体文件 下面在jsp页面用到时，需要使用tag标记调用 相当于头文件或者函数声明 tagdir属性 可取值 需要使用标记文件所在的文件夹 从/WEB-INF相对路径开始写 prefix属性 其中前缀可以自定义取值，目的是为了区分不同路径下的相同Tag文件 JSP文件 以下是调用Tag文件的效果： 以下是调用Tag文件的效果： Tag文件 FirstTag.tag文件使用Tag标记调用SecondTag.tag文件。 SecondTag.tag文件负责从四组数中随机取出m个(m FirstTag.tag将SecondTag.tag返回的m个随机数从小到大排列，并计算出它们的和。demo.jsp使用Tag标记调用FirstTag.tag demo.jsp /WEB-INF/tags/geng/FirstTag.tag \"/> 按从小到大排列:\"); for(int i=0;i得到的\"+number+\"个随机数之和:\"+sum+\"\"); %> /WEB-INF/tags/geng/SecondTag.tag 0) { int m=(int)(Math.random()*listBox.size()); Integer integer=(Integer)listBox.get(m); listNeeded.add(integer); listBox.remove(m); count--; } jspContext.setAttribute(\"listNumber\",listNeeded); //返回listNumber %> 效果 适应于Tag文件的指令标记 Tag指令 作用 Tag文件中的tag指令类似于JSP文件中的page指令。 Tag文件通过使用tag指令可以指定某些属性的值，以便从总体上影响Tag文件的处理和表示。 语法 在一个Tag文件中可以使用多个tag指令，因此我们经常使用多个tag指令为属性指定需要的值 …… 属性 tag指令可以操作的属性有 body-content language import pageEncoding body-content属性 功能 body-content属性的值可以确定JSP页面使用Tag标记时是否可以有标记体，如果允许有标记体，该属性会给出标记体内容的类型。 可取值 body-content属性值有：empty、tagdependent、scriptless，默认值是scriptless。 属性的值是empty,JSP页面必须使用没有标记体的Tag标记来调用相应的Tag文件。 属性的值是tagdependent或scriptless,JSP页面使用无标记体或有标记体的Tag标记来调用相应的Tag文件。 属性值是scriptless,那么标记体中不能有Java程序片； 属性值是tagdependent,那么Tag文件将标记体的内容按纯文本处理。 默认值 默认值是scriptless language属性 功能 language属性的值指定Tag文件使用的脚本语言 可取值 目前只能取值java 默认值 其默认值就是java import属性 功能 import属性的作用是为Tag文件引入Java核心包中的类，这样就可以在Tag文件的程序片部分、变量及方法声明部分、表达式部分使用Java核心包中的类。 可取值 import属性可以取多个值 默认值 import属性已经有如下值： `java.lang.*`、 `javax.servlet.*`、 `javax.servlet.jsp.*`、`javax.servlet.http.*` pageEncoding属性 功能 该属性指定Tag文件的字符编码 可取值 ISO-8859-1、GB2312、UTF-8等 默认值 其默认值是ISO-8859-1 注意 默认值是ISO-8859-1不支持中文 这是一个Tab文件，负责计算1～100内的偶数之和： attribute指令 功能 在Tag文件中通过使用attribute指令，可以让使用它的JSP页面向该Tag文件传递需要的数据。 数量 可以有多个 语法 attribute指令的格式如下： 注意 attribute指令中的name属性是必需的 name属性 功能 JSP文件在调用Tag文件时，可向所调用的Tag文件中name属性指定的对象传递一个引用 可取值 名字必须符合标识符规定 即名字可以由字母、下划线、美元符号和数字组成，并且第一个字符不能是数字字符 默认值 无默认值，必须指定 注意 attribute指令中的name属性是必需的 在Tag文件中不可以再定义和attribute指令中name属性指定的对象具有相同名字的变量，否则将隐藏attribute指令中的对象，使其失效 相当于形式参数 比如，一个Tag文件MyTag.tag中有如下的attribute指令： 那么JSP页面就可以如下使用Tag标记（假设标记的前缀为computer）调用MyTag.tag： 或 我向Tag文件中传递的值是1000 type属性 功能 type指定对象的类型 可取值 带包名的对象类型 如type=\"java.util.Date\",不可简写Date 默认值 如果attribute指令中没有使用type指定对象类型，那对象类型是java.lang.String类型 注意 包名不可省 required属性 功能 可取值 true或者false true (调用改Tag文件的)JSP页面必须向该Tag文件中(attribute指令中的name属性指定的)对象传递一个引用 即如果使用，没有传递引用而调用Tag文件就会出现错误 flase (调用改Tag文件的)JSP页面可以向该Tag文件中(attribute指令中的name属性指定的)对象传递一个引用，也可以不传递 默认值 如果省略required属性，那么默认值为false demo.jsp使用Tag标记调用Triangle.tag文件，并且向Triangle.tag文件传递三角形三边的长度,Triangle.tag文件负责计算、显示三角形的面积 demo.jsp 以下是调用Tag文件的效果： /WEB-INF/tags/Triangle.tag 这是一个Tag文件，负责计算三角形的面积。 c&&a+c>b&&c+b>a) { double p=(a+b+c)/2.0; double area=Math.sqrt(p*(p-a)*(p-b)*(p-c)) ; return \"三角形的面积:\"+area; } else return(\"\"+a+\",\"+b+\",\"+c+\"不能构成一个三角形,无法计算面积\"); } %> JSP页面传递过来的三条边：\"+sideA+\",\"+sideB+\",\"+sideC); double a=Double.parseDouble(sideA); double b=Double.parseDouble(sideB); double c=Double.parseDouble(sideC); out.println(getArea(a,b,c)); %> 效果 JSP页面只负责将学生的姓名和成绩分别存放到链表（java.util.LinkedLst类型对象）中,然后将链表传递给Sort.tag，Sort.tag负责按从低到高显示学生的成绩。 demo.jsp 成绩单: \" listScore=\"\"/> /WEB-INF/tags/Sort.tag \"); out.print(\"\"); out.print(\"\"+title+\"\"); out.print(\"\"+item+\"\"); out.print(\"\"); for(int k=0;k\"); double score=(Double)listScore.get(k); String name=(String)listName.get(k); if(score\"+name+\"\"); out.print(\"\"+score+\"\"); } else{ out.print(\"\"+name+\"\"); out.print(\"\"+score+\"\"); } out.print(\"\"); } out.print(\"\"); %> 效果 variable指令 功能 Tag文件通过使用variable指令可以将Tag文件中的对象返回给调用该Tag文件的JSP页面 区别 和attribute区别 attribute直接处理就成显示html了 variable处理后是数据返回 格式 该variable指令给出的对象的名字是time、类型为java.util.Date、有效范围是AT_END。 对象的返回 jspContext调用setAttribute(“对象的名字”,对象的引用)方法存储对象的名字以及该对象的引用。 比如：jspContext.setAttribute(\"time\",new Date());将名字是time的Date对象存储到jspContext中。 以下的variable指令：为JSP页面返回名字是time的Date对象。 注意 在JSP页面中不可以再定义与Tag文件返回的对象具有相同名字的变量，否则Tag文件无法将variable给出的对象返回给JSP页面（将出现编译错误） 如果Tag文件同时使用attribute和variable指令，则两个指令中的name指定对象也不能相同 不能在Tag文件中的java程序片中直接操作variable指令对象，Tag只能将对象的名字及其引用存储到jspContext中 这一点和形式参数不一样，相当于只能声明时和最后传值时用一下，对象的引用也是最后new传过去 name-given属性 用来指定对象的名字 名字必须符合标识符规定 即名字可以由字母、下划线、美元符号和数字组成，并且第一个字符不能是数字字符 variable-class属性 作用 指定对象的类型 可选值 带包名的对象类型 如type=\"java.util.Date\",不可简写Date 默认值 如果variable指令中没有使用type指定对象类型，那对象类型是java.lang.String类型 scope属性 作用 指定对象的有效范围 可选值 AT_BEGIN (at begin) JSP页面一旦开始使用Tag标记，就可以使用variable指令给出的对象，可在该Tag标记体及该Tag标记之后使用variable指令给出的对象 NESTED (nested嵌套) 只可以在该Tag标记体中使用variable指令给出的对象 AT_END (at end) 不可以在该Tag标记前使用variable指令给出的对象 不可以在该Tag标记体中使用variable指令给出的对象 只可以在调用完该Tag标记后使用variable指令给出的对象 默认值 Tag文件GiveRoot.tag负责求出一元二次方程的根。 JSP页面在调用Tag文件时，使用attribute指令将方程的系数传递给Tag文件； Tag文件GiveRoot.tag使用variable指令返回一元二次方程的根给调用该Tag文件的JSP页面。 useOne.jsp和useTwo.jsp都使用Tag标记调用GiveRoot.tag，二者都可以得到GiveRoot.tag返回的方程的两个根，但是二者使用不同的方式来处理和显示方程的两个根。 userOne.jsp将方程的根保留最多3位小数，并计算方程的两个根之和，userTwo.jsp将方程的根保留最多5位小数，并计算方程的两个根之积。 /WEB-INF/tags/GiveRoot.tag =0&&a!=0){ root1=(-b+Math.sqrt(disk))/(2*a); root2=(-b-Math.sqrt(disk))/(2*a); jspContext.setAttribute(\"rootOne\",new Double(root1)); //为JSP页面返回对象rootOne jspContext.setAttribute(\"rootTwo\",new Double(root2)); //为JSP页面返回对象rootTwo } else{ jspContext.setAttribute(\"rootOne\",null); jspContext.setAttribute(\"rootTwo\",null); } %> userOne.jsp 方程的根保留3位小数点,并计算两个根的和: 根1:\"+s1); out.println(\"根2:\"+s2); double sum=r1+r2; out.println(\"根1与根2之和:\"+sum); } else{ out.println(\"方程没有实根\"); } %> userTwo.jsp 方程的根保留5位小数点,并计算两个根的积: 根1:\"+s1); out.println(\"根2:\"+s2); double ji=r1*r2; out.println(\"根1与根2之积:\"+ji); } else{ out.println(\"方程没有实根\"); } %> 效果 "},"page/1035.html":{"url":"page/1035.html","title":"动作标记","keywords":"","body":"动作标记 功能 动作标记是一种特殊的标记，它影响JSP运行时的功能。 格式 适应于JSP页面的动作标记 include动作标记 作用 include动作标记告诉JSP页面动态包含一个文件，即JSP页面运行时才将文件加入。 不同 与静态插入文件的include指令标记不同。 如果包含的文件是普通的文本文件，就将文件的内容发送到用户端，由用户端的浏览器负责显示； 如果包含的文件是JSP文件，JSP引擎就执行这个文件，然后将执行的结果发送到用户端，并由用户端的浏览器负责显示这些结果。 语法格式 或 param子标记 组合 当该标记与param标记一起使用时， 可以将param标记中的值传递到include动作标记要加载的文件中去 被加载的JSP文件可以使用Tomcat服务器提供的request内置对象获取include动作标记的param子标记中name属性所提供的值， 因此include动作标记通过使用param子标记来处理加载的文件，比include指令标记更为灵活。 demo.jsp 加载的文件 加载的图像 Myfile/car.txt one two three imageCar.html car car.jpg 效果 param 动作标记 作用 param标记以“名字—值”对的形式为其他标记提供附加信息 语法 注意 param标记不能独立使用， 需作为jsp:include、jsp:forward、jsp:plugin标记的子标记来使用。 demo.jsp使用include动作标记动态加载文件tom.jsp, 当tom.jsp文件被加载时获取demo.jsp页面中include动作标记的param子标记中name属性的值 (tom.jsp文件使用Tomcat服务器提供的request内置对象获取param子标记中name属性的值) 类似于demo.jsp调用tom.jsp并通过param传递参数 demo.jsp 加载文件效果： tom.jsp 从1到的连续和是： 效果 forward 动作标记 作用 从该指令处停止当前页面的执行，而转向执行page属性指定的JSP页面。 语法 或 param子标记 注意 当forward动作标记不需要param子标记时，必须使用第一种形式。即 当前页面使用forward动作标记转向后，尽管用户看到了转向后的页面的效果，但浏览器地址栏中显示的仍然是转向前的JSP页面的URL地址，因此，如果刷新浏览器的显示，将再次执行当前浏览器地址栏中显示的JSP页面。 组合 forward标记可以使用param动作标记作为子标记，向转向的页面传送信息。 forward动作标记指定的要转向的JSP文件可以使用Tomcat服务器提供的request内置对象获取param子标记中name属性所提供的值。 demo.jsp页面使用forward动作标记转向come.jsp页面，并向come.jsp页面传递一个数值。 demo.jsp \" /> come.jsp 您传过来的数值是: 效果 plugin动作标记 作用 该动作标记指示JSP页面加载Java plugin插件。 该插件由用户负责下载，并使用该插件来运行Java applet小程序。 语法格式 提示信息：用来提示用户的浏览器是否支持插件下载 假设有一个Java applet小程序，主类字节码文件是B.class，该文件存放在Web服务目录中，含有plugin动作标记的JSP文件demo.jsp也存放在Web服务目录中。 demo.jsp Plugin tag OBJECT or EMBED not supported by browser. useBean 动作标记 作用 该标记用来创建并使用一个Javabean Sun公司倡导的是：Javabean负责存储数据，JSP页面显示Javabean中的数据，而servlet负责管理Javabean中的数据。 适应于Tag文件的动作标记 doBody动作标记 作用 当我们使用Tag标记时，可以带有标记体，标记体还可以是一个Tag标记，这就实现了Tag标记的嵌套。 JSP页面中的Tag标记中的标记体由Tag文件的标记负责处理， 而在Tag文件中，标记被替换成对“标记体”进行处理后所得到的结果。 语法 demo.jsp页面调用Biaoge.tag,使用Tag标记嵌套显示一个表格 demo.jsp Tag标记嵌套显示学生名单: /WEB-INF/tags/Biaoge.tag \"> 效果 "}}